#include <iostream>
#include <queue>
#include <string>

using namespace std;

struct Patient {
    string name;
    bool isCritical;  // true for emergency patients, false for regular
};

class HospitalQueue {
private:
    queue<Patient> normalQueue;
    queue<Patient> emergencyQueue;
    const int serviceTimePerPatient = 10; // minutes per patient

public:
    void addPatient(const string& name, bool isCritical) {
        Patient p{name, isCritical};
        if (isCritical) {
            emergencyQueue.push(p);
            cout << "Added to emergency queue.\n";
        } else {
            normalQueue.push(p);
            cout << "Added to normal queue.\n";
        }
    }

    void servePatient() {
        if (!emergencyQueue.empty()) {
            Patient p = emergencyQueue.front();
            emergencyQueue.pop();
            cout << "Serving emergency patient: " << p.name << "\n";
        } else if (!normalQueue.empty()) {
            Patient p = normalQueue.front();
            normalQueue.pop();
            cout << "Serving regular patient: " << p.name << "\n";
        } else {
            cout << "No patients to serve.\n";
        }
    }

    void displayQueues() {
        cout << "\nEmergency Queue (" << emergencyQueue.size() << " patients):\n";
        displayQueue(emergencyQueue);
        cout << "\nNormal Queue (" << normalQueue.size() << " patients):\n";
        displayQueue(normalQueue);

        cout << "\nEstimated wait times:\n";
        cout << "Next emergency patient: 0 minutes\n";
        cout << "Regular patients: " << emergencyQueue.size() * serviceTimePerPatient << " minutes wait approx.\n";
    }

    void displayQueue(queue<Patient> q) {  // pass by value to copy queue
        if (q.empty()) {
            cout << "  None\n";
            return;
        }
        while (!q.empty()) {
            cout << "  " << q.front().name << (q.front().isCritical ? " (Emergency)" : " (Regular)") << "\n";
            q.pop();
        }
    }
};

int main() {
    HospitalQueue hq;
    int choice;
    string name;
    int critical;

    do {
        cout << "\n=== Hospital Patient Queue ===\n";
        cout << "1. Add Patient\n";
        cout << "2. Serve Next Patient\n";
        cout << "3. Show Queues & Wait Times\n";
        cout << "4. Exit\n";
        cout << "Choose an option: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1:
                cout << "Enter patient name: ";
                getline(cin, name);
                cout << "Is emergency? (1 = Yes, 0 = No): ";
                cin >> critical;
                cin.ignore();
                hq.addPatient(name, critical == 1);
                break;
            case 2:
                hq.servePatient();
                break;
            case 3:
                hq.displayQueues();
                break;
            case 4:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 4);

    return 0;
}
